@import url('https://fonts.googleapis.com/css2?family=Oswald:wght@200&family=Yomogi&family=Zen+Tokyo+Zoo&display=swap');

@import url('import.css');


/*Font families

    font-family: 'Oswald', sans-serif;
    font-family: 'Yomogi', cursive;
    font-family: 'Zen Tokyo Zoo', cursive;
*/


header {
    color: white;
}



p {
    text-align: center;
    margin-left: auto;
    margin-right: auto;
}

.center {
    margin: auto;
    width: 50%;
    padding: 10px;
}

main {
    text-align: center;
    margin-left: auto;
    margin-right: auto;
}

footer {
    color: mintcream
}

h1 {
    color: darkred;
    font-size: 30px;
    text-align: center
}

aside h2 {
    color: cornsilk;
    text-decoration: underline;
    text-align: center
}

header h1 {
    color: darkslategray;
    font-size: 40px;
    text-align: center
}

/*Nav styling*/
/*Verticle link blocks*/
ul.blockList {
    background-color: aquamarine;
    list-style: none;
}

    ul.blockList a {
        color: darkorchid;
        text-align: center;
        display: block;
        /*display: block makes the entire horizontal element clickable*/
    }

        /*CSS pseudo selectors allows us to change CSS styling based upon page events such as hovering over an element or targeting an element.*/

        ul.blockList a:hover {
            background-color: yellow;
            color: crimson;
        }

/*Site nav*/
a {
    color: gold;
    font-weight: bold;
    text-decoration: none;
}

    a:hover, a:active, a:focus {
        color: goldenrod;
        text-decoration: underline;
        background-color: red;
    }

nav a {
    color: lightsalmon;
}

    nav a:hover, a:active, a:focus {
        text-decoration: none;
    }

nav ul {
    background-color: maroon;
}

nav li:hover {
    background-color: yellowgreen;
}

nav li {
    display: inline-block;
}

nav ul li a {
    padding: .4em;
    display: block;
}

/*nav page highlighting*/
.selected {
    background-color: darkgoldenrod;
}

/*colors*/
#colordemo1 {
    background-color: #B060E8;
    color: #E8E1E1;
}

#colordemo2 {
    background-color: #AAA;
    color: #222;
}

#colordemo3 {
    background-color: rgb(202, 15, 120);
    color: rgb(25, 50, 32);
}

#colordemo4 {
    background-color: rgba(20, 24, 40, .5);
    color: rgb(255, 10, 85);
}

/*#colorGradient1 {
    background-image: linear-gradient(90deg, red, yellow);
}

#colorGradient2 {
    background-image: radial-gradient(circle farthest-side at 50% 60%, pink, purple, blue);
}*/

#fontdemo1 {
    font-family: serif;
}

#fontdemo2 {
    font-family: sans-serif;
}

#fontdemo3 {
    font-family: cursive;
}

#fontdemo4 {
    font-family: monospace;
}

#fontdemo5 {
    font-family: fantasy;
}

.bold {
    font-weight: bold;
}

.italic {
    font-style: italic;
}

.small-caps {
    font-variant: small-caps;
}

.letter-spacing {
    letter-spacing: 3em;
}

.word-spacing {
    word-spacing: 1em;
}

.cdnDemo1 {
    font-family: 'Oswald', sans-serif;
}

.cdnDemo2 {
    font-family: 'Yomogi', cursive;
}

.cdnDemo3 {
    font-family: 'Zen Tokyo Zoo', cursive;
}

/*#region Images*/
/*
    Image Syntax:
    <img src="path/file.ext" alt="descriptive text" title="short description"/>

    CSS Image Properties:
    background-url: allows you to pass the url of an image to set it as a bg
    background-repeat: if the image is not big enough to fill the space should it repeat in the background
    background-attachment: if the image is scrollable or fixed
    background-position: positions the image in the viewport
        - You can set specific x (horizontal) and y (vertical) position values using px, em, %
    background-size:
        - Cover: allows the browser to stretch an image to completely fill the space (could result in truncation)
        - Contain: scale to the largest size possible without truncation

    Shorthand:
    background: color, url(path/file.ext), position/size, repeat attachment

    If you set a bg image using CSS, you cannot provide an alt attribute. Therefore you must provide an alternate way of describing the image.
*/



/*/*Background Images*/

/*positioning a single image through CSS*/
#headerOverlay {
    background-image: url(../Images/logo.jpg);
    background-repeat: no-repeat;
    background-size: 90px;
    background-position: 3% center; /*horizontal vertical*/
    padding: 2em;
}

header h1, header p {
    margin: 7px 0 7px 150px;
    /*This clears the text of the bg area*/
}

header h1 {
    text-align: left;
    letter-spacing: 0.1em;
    color: yellow;
}

header {
    border-radius: 5px;
}

/*background image for the entire page*/
body {
    background-image: url('../Images/kansas city bg.jpg');
    background-color: red;
    color: white;
    background-size: cover;
    margin-left: auto;
    margin-right: auto;
}

/*This is a super sweet border, that you may want to comment out later*/
/*nav ul {
    min-height: 52px;
    background-image: url(../Images/border_wave.png);
    background-repeat: repeat-x;
    background-position: bottom;
    background-size: 200px;
}*/


/*#endregion*/

/*#region*/
/*********************************************
             Custom Lightbox
**********************************************/

.thumb {
    cursor: pointer;
}

#lightbox-container {
    position: fixed;
    height: 100%;
    width: 100%;
    top: 0;
    left: 0;
    background-color: rgba(0, 0, 0, 0.8);
    text-align: center;
    padding-top: 65px;
    display: none;
}

    #lightbox-container p {
        color: #fff;
    }

#lightbox-content img {
    border: 10px solid gray;
    margin: auto;
}
/*#endregion*/

/*#region*/
/*********************************************
             Form Validation
**********************************************/

.invalid {
    color: red;
    font-style: italic;
}
/*#endregion*/

/*#region CSS box model*/
/*
    CSS Box Model

    For elements that are block level or are styled to have a display of inline-block, you can use the CSS box model

    Display: Inline-block
    - Act like an inline element and only take up enough space for its content.
    -Still want to have the box model properties available

    Elements of the box model are content (including height and width), padding, border, and margin

    Syntax options for padding and amrgin (no commas)
    1 value: all sides
    2 values: TB LR
    3 values: T LR B
    4 values: T R B L (clock-wise)

    Possiblle Values
    px (fixed width)
    em (multiplier based on font-size in the current context)
    % (based on the width of the parent container - typically used for horizontal positioning)
*/

/*Create a gallery layout for images.html*/
div.galleryItem {
    margin: 5px;
    border: 1px solid #ccc;
    display: inline-block; /*This is the line of code that allows the divs to line up next to each other*/
    width: 350px;
}

    div.galleryItem:hover {
        border: 1px solid lightsalmon;
    }

    div.galleryItem img {
        width: 100%;
        height: auto;
    }

    div.galleryItem a:hover {
        background-color: lightsalmon;
    }

#imageGallery {
    margin: 0 auto; /*very helpful for centering content inside of an element*/
    width: 85%;
    text-align: center; /*centers the content inside of the element with the id of imageGallery*/
}

.mainWrapper {
    padding: 1%;
}

footer {
    padding: 3%;
}

nav ul {
    margin: 0;
}

aside h2 {
    padding: 2%;
}
/*#endregion*/

/*#region Float & Clear*/
/*
    Float and Clear Notes

    Floating an element in HTML is when you move it to the left or right of its parenting container.

    Floating an element can cause the parenting container to collaps because the element is no longer contributing to its height.

    You can use clears to force parenting containers to maintain their height and to ensure that content from below does NOT flow up beside the floated element. (Clear is the line in the sand)

    Clears only clear the container they are placed in.
*/

#html, #js {
    float: right;
    height: 75px;
    margin-left: 20px;
}

#css {
    float: left;
    height: 75px;
    margin-right: 20px;
}

#frontendDev section {
    width: 85%;
    margin: 0 auto;
}

    #frontendDev section h3 {
        margin: 10px 75px;
    }

    #frontendDev section p {
        margin: 0 75px;
    }

/*For index.html - 2 column layout where 1 column is floated*/
#leftColumn {
    width: 73%;
}

#rightColumn {
    width: 25%;
    float: right;
}

aside h2 {
    margin-top: 0;
}

/*For HTML.html - 2 column layout with 1 column floated and margin to clear the space for the content*/
#htmlLeftColumn {
    margin-right: 25%;
}

#htmlRightColumn {
    width: 25%;
    float: right;
}

/*For CSS.html - 2 column layout with both columns floated - because both coluns are floated we do NOT want the parent element to collapse so we have add in a clear (line in the sand) */
#cssLeftColumn {
    width: 75%;
    float: left;
    box-sizing: border-box;
    /*Changes the way width and height are figured. With border-box, you are saying that 73% width includes not only content, but also padding and border*/
}

#cssRightColumn {
    width: 25%;
    float: right;
}

.clear {
    clear: both;
}

/*#endregion*/

/*#region HTML Tables*/
table, tr, td, th {
    border: 1px solid black;
    border-collapse: collapse; /*avoids duplicate adjacent borders inside of a table*/
}

table {
    margin: auto;
    margin-bottom: 2em;
}

th {
    font-weight: bold;
    text-align: center;
}

td, th {
    padding: .3em;
    border-style: solid;
    border-color: black;
    border-width: 5px;
}

thead {
    background-color: #96F3FA;
}

tfoot {
    background-color: teal;
}

tfoot tr, tfoot td {
    border: 3px solid black;
    border-collapse: collapse;
}


/*#endregion*/

